Copyright (C) 2019 Andrei Odintsov <forestryks1@gmail.com>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

diff -ruNp linux-4.14.88/arch/x86/entry/syscalls/syscall_64.tbl linux-4.14.88-kjudge/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-4.14.88/arch/x86/entry/syscalls/syscall_64.tbl	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/arch/x86/entry/syscalls/syscall_64.tbl	2019-01-18 17:11:23.614633277 +0300
@@ -339,6 +339,7 @@
 330	common	pkey_alloc		sys_pkey_alloc
 331	common	pkey_free		sys_pkey_free
 332	common	statx			sys_statx
+333	common	kj_isolate		sys_kj_isolate
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -ruNp linux-4.14.88/fs/exec.c linux-4.14.88-kjudge/fs/exec.c
--- linux-4.14.88/fs/exec.c	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/fs/exec.c	2019-01-18 18:20:21.915638797 +0300
@@ -1035,6 +1035,7 @@ static int exec_mmap(struct mm_struct *m
 		up_read(&old_mm->mmap_sem);
 		BUG_ON(active_mm != old_mm);
 		setmax_mm_hiwater_rss(&tsk->signal->maxrss, old_mm);
+		setmax_mm_hiwater_vm(&tsk->signal->maxvm, old_mm);
 		mm_update_next_owner(old_mm);
 		mmput(old_mm);
 		return 0;
@@ -1834,6 +1835,12 @@ out_files:
 	if (displaced)
 		reset_files_struct(displaced);
 out_ret:
+	if (retval == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT_EXEC;
+		}
+	}
+
 	putname(filename);
 	return retval;
 }
diff -ruNp linux-4.14.88/fs/proc/base.c linux-4.14.88-kjudge/fs/proc/base.c
--- linux-4.14.88/fs/proc/base.c	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/fs/proc/base.c	2019-01-18 17:11:23.614633277 +0300
@@ -584,6 +584,7 @@ static const struct limit_names lnames[R
 	[RLIMIT_NICE] = {"Max nice priority", NULL},
 	[RLIMIT_RTPRIO] = {"Max realtime priority", NULL},
 	[RLIMIT_RTTIME] = {"Max realtime timeout", "us"},
+	[RLIMIT_MCPU] = {"Max cpu time", "ms"},
 };
 
 /* Display limits for a process */
diff -ruNp linux-4.14.88/include/asm-generic/resource.h linux-4.14.88-kjudge/include/asm-generic/resource.h
--- linux-4.14.88/include/asm-generic/resource.h	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/include/asm-generic/resource.h	2019-01-18 17:11:23.614633277 +0300
@@ -26,6 +26,7 @@
 	[RLIMIT_NICE]		= { 0, 0 },				\
 	[RLIMIT_RTPRIO]		= { 0, 0 },				\
 	[RLIMIT_RTTIME]		= {  RLIM_INFINITY,  RLIM_INFINITY },	\
+	[RLIMIT_MCPU]		= {  RLIM_INFINITY,  RLIM_INFINITY },	\
 }
 
 #endif
diff -ruNp linux-4.14.88/include/linux/mm.h linux-4.14.88-kjudge/include/linux/mm.h
--- linux-4.14.88/include/linux/mm.h	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/include/linux/mm.h	2019-01-18 18:17:41.502608750 +0300
@@ -1576,6 +1576,15 @@ static inline void setmax_mm_hiwater_rss
 		*maxrss = hiwater_rss;
 }
 
+static inline void setmax_mm_hiwater_vm(unsigned long *maxvm,
+					 struct mm_struct *mm)
+{
+	unsigned long hiwater_vm = get_mm_hiwater_vm(mm);
+
+	if (*maxvm < hiwater_vm)
+		*maxvm = hiwater_vm;
+}
+
 #if defined(SPLIT_RSS_COUNTING)
 void sync_mm_rss(struct mm_struct *mm);
 #else
diff -ruNp linux-4.14.88/include/linux/posix-timers.h linux-4.14.88-kjudge/include/linux/posix-timers.h
--- linux-4.14.88/include/linux/posix-timers.h	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/include/linux/posix-timers.h	2019-01-18 17:11:23.614633277 +0300
@@ -112,6 +112,7 @@ void set_process_cpu_timer(struct task_s
 			   u64 *newval, u64 *oldval);
 
 void update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new);
+void update_rlimit_mcpu(struct task_struct *task, unsigned long rlim_new);
 
 void posixtimer_rearm(struct siginfo *info);
 #endif
diff -ruNp linux-4.14.88/include/linux/sched/signal.h linux-4.14.88-kjudge/include/linux/sched/signal.h
--- linux-4.14.88/include/linux/sched/signal.h	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/include/linux/sched/signal.h	2019-01-18 18:13:48.727171775 +0300
@@ -177,6 +177,7 @@ struct signal_struct {
 	unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 	unsigned long inblock, oublock, cinblock, coublock;
 	unsigned long maxrss, cmaxrss;
+	unsigned long maxvm, cmaxvm;
 	struct task_io_accounting ioac;
 
 	/*
diff -ruNp linux-4.14.88/include/linux/sched.h linux-4.14.88-kjudge/include/linux/sched.h
--- linux-4.14.88/include/linux/sched.h	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/include/linux/sched.h	2019-01-18 17:11:23.614633277 +0300
@@ -65,6 +65,24 @@ struct task_group;
  * mistake.
  */
 
+#define KJ_WAS_MEMLIMIT					0x0001
+#define KJ_WAS_MEMLIMIT_STACK			0x0002
+#define KJ_WAS_MEMLIMIT_EXEC			0x0004
+#define KJ_WAS_TIMELIMIT_CPU			0x0008
+#define KJ_WAS_TIMELIMIT_RT				0x0010	/* now means nothing special */
+#define KJ_STAT_MEMLIMIT				0x0020
+#define KJ_STAT_TIMELIMIT				0x0040
+
+/* now status is represented in such way:
+ * [31..22] - SV syscall id
+ * [21..16]	- KJ flags
+ * [15..0]  - system info 0xffff
+ */
+#define KJ_WAS_MEMLIMIT_STAT			0x10000
+#define KJ_WAS_MEMLIMIT_STACK_STAT		0x20000
+#define KJ_WAS_MEMLIMIT_EXEC_STAT		0x40000
+#define KJ_WAS_TIMELIMIT_STAT			0x80000
+
 /* Used in tsk->state: */
 #define TASK_RUNNING			0x0000
 #define TASK_INTERRUPTIBLE		0x0001
@@ -1138,6 +1156,8 @@ struct task_struct {
 	void				*security;
 #endif
 
+	unsigned int kj_flags;
+
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff -ruNp linux-4.14.88/include/linux/syscalls.h linux-4.14.88-kjudge/include/linux/syscalls.h
--- linux-4.14.88/include/linux/syscalls.h	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/include/linux/syscalls.h	2019-01-18 17:11:23.618633291 +0300
@@ -940,5 +940,6 @@ asmlinkage long sys_pkey_alloc(unsigned
 asmlinkage long sys_pkey_free(int pkey);
 asmlinkage long sys_statx(int dfd, const char __user *path, unsigned flags,
 			  unsigned mask, struct statx __user *buffer);
+asmlinkage long sys_kj_isolate(unsigned flags);
 
 #endif
diff -ruNp linux-4.14.88/include/uapi/asm-generic/resource.h linux-4.14.88-kjudge/include/uapi/asm-generic/resource.h
--- linux-4.14.88/include/uapi/asm-generic/resource.h	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/include/uapi/asm-generic/resource.h	2019-01-18 17:11:23.618633291 +0300
@@ -46,7 +46,8 @@
 					   0-39 for nice level 19 .. -20 */
 #define RLIMIT_RTPRIO		14	/* maximum realtime priority */
 #define RLIMIT_RTTIME		15	/* timeout for RT tasks in us */
-#define RLIM_NLIMITS		16
+#define RLIMIT_MCPU			16	/* maximum cpu time in ms */
+#define RLIM_NLIMITS		17
 
 /*
  * SuS says limits have to be unsigned.
diff -ruNp linux-4.14.88/kernel/exit.c linux-4.14.88-kjudge/kernel/exit.c
--- linux-4.14.88/kernel/exit.c	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/kernel/exit.c	2019-01-18 18:19:56.693371561 +0300
@@ -838,8 +838,10 @@ void __noreturn do_exit(long code)
 		hrtimer_cancel(&tsk->signal->real_timer);
 		exit_itimers(tsk->signal);
 #endif
-		if (tsk->mm)
+		if (tsk->mm) {
 			setmax_mm_hiwater_rss(&tsk->signal->maxrss, tsk->mm);
+			setmax_mm_hiwater_vm(&tsk->signal->maxvm, tsk->mm);
+		}
 	}
 	acct_collect(code, group_dead);
 	if (group_dead)
@@ -1087,7 +1089,7 @@ static int wait_task_zombie(struct wait_
 	if (state == EXIT_DEAD && thread_group_leader(p)) {
 		struct signal_struct *sig = p->signal;
 		struct signal_struct *psig = current->signal;
-		unsigned long maxrss;
+		unsigned long maxrss, maxvm;
 		u64 tgutime, tgstime;
 
 		/*
@@ -1133,6 +1135,9 @@ static int wait_task_zombie(struct wait_
 		maxrss = max(sig->maxrss, sig->cmaxrss);
 		if (psig->cmaxrss < maxrss)
 			psig->cmaxrss = maxrss;
+		maxvm = max(sig->maxvm, sig->cmaxvm);
+		if (psig->cmaxvm < maxvm)
+			psig->cmaxvm = maxvm;
 		task_io_accounting_add(&psig->ioac, &p->ioac);
 		task_io_accounting_add(&psig->ioac, &sig->ioac);
 		write_sequnlock(&psig->stats_lock);
@@ -1143,6 +1148,15 @@ static int wait_task_zombie(struct wait_
 		getrusage(p, RUSAGE_BOTH, wo->wo_rusage);
 	status = (p->signal->flags & SIGNAL_GROUP_EXIT)
 		? p->signal->group_exit_code : p->exit_code;
+
+	if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT))
+		status |= KJ_WAS_MEMLIMIT_STAT;
+	if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT_STACK))
+		status |= KJ_WAS_MEMLIMIT_STACK_STAT;
+	if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT_EXEC))
+		status |= KJ_WAS_MEMLIMIT_EXEC_STAT;
+	if ((p->kj_flags & KJ_STAT_TIMELIMIT) && (p->kj_flags & (KJ_WAS_TIMELIMIT_CPU | KJ_WAS_TIMELIMIT_RT)))
+		status |= KJ_WAS_TIMELIMIT_STAT;
 	wo->wo_stat = status;
 
 	if (state == EXIT_TRACE) {
@@ -1258,10 +1272,19 @@ unlock_sig:
 	sched_annotate_sleep();
 	if (wo->wo_rusage)
 		getrusage(p, RUSAGE_BOTH, wo->wo_rusage);
-	put_task_struct(p);
 
-	if (likely(!(wo->wo_flags & WNOWAIT)))
+	if (likely(!(wo->wo_flags & WNOWAIT))) {
 		wo->wo_stat = (exit_code << 8) | 0x7f;
+		if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT))
+			wo->wo_stat |= KJ_WAS_MEMLIMIT_STAT;
+		if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT_STACK))
+			wo->wo_stat |= KJ_WAS_MEMLIMIT_STACK_STAT;
+		if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT_EXEC))
+			wo->wo_stat |= KJ_WAS_MEMLIMIT_EXEC_STAT;
+		if ((p->kj_flags & KJ_STAT_TIMELIMIT) && (p->kj_flags & (KJ_WAS_TIMELIMIT_CPU | KJ_WAS_TIMELIMIT_RT)))
+			wo->wo_stat |= KJ_WAS_TIMELIMIT_STAT;
+	}
+	put_task_struct(p);
 
 	infop = wo->wo_info;
 	if (infop) {
diff -ruNp linux-4.14.88/kernel/fork.c linux-4.14.88-kjudge/kernel/fork.c
--- linux-4.14.88/kernel/fork.c	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/kernel/fork.c	2019-01-18 17:11:23.618633291 +0300
@@ -1377,11 +1377,17 @@ static void posix_cpu_timers_init_group(
 	unsigned long cpu_limit;
 
 	cpu_limit = READ_ONCE(sig->rlim[RLIMIT_CPU].rlim_cur);
-	if (cpu_limit != RLIM_INFINITY) {
+	if (unlikely((cpu_limit != RLIM_INFINITY))) {
 		sig->cputime_expires.prof_exp = cpu_limit * NSEC_PER_SEC;
 		sig->cputimer.running = true;
 	}
 
+	cpu_limit = READ_ONCE(sig->rlim[RLIMIT_MCPU].rlim_cur);
+	if (unlikely((cpu_limit != RLIM_INFINITY))) {
+		sig->cputime_expires.prof_exp = cpu_limit * NSEC_PER_MSEC;
+		sig->cputimer.running = true;
+	}
+
 	/* The timer lists. */
 	INIT_LIST_HEAD(&sig->cpu_timers[0]);
 	INIT_LIST_HEAD(&sig->cpu_timers[1]);
diff -ruNp linux-4.14.88/kernel/sys.c linux-4.14.88-kjudge/kernel/sys.c
--- linux-4.14.88/kernel/sys.c	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/kernel/sys.c	2019-01-18 18:22:58.607455023 +0300
@@ -1476,6 +1476,14 @@ int do_prlimit(struct task_struct *tsk,
 		if (resource == RLIMIT_NOFILE &&
 				new_rlim->rlim_max > sysctl_nr_open)
 			return -EPERM;
+		if (resource == RLIMIT_CPU &&
+				task_rlimit(tsk, RLIMIT_MCPU) != RLIM_INFINITY) {
+			return -EINVAL;
+		}
+		if (resource == RLIMIT_MCPU &&
+				task_rlimit(tsk, RLIMIT_CPU) != RLIM_INFINITY) {
+			return -EINVAL;
+		}
 	}
 
 	/* protect tsk->signal and tsk->sighand from disappearing */
@@ -1495,7 +1503,7 @@ int do_prlimit(struct task_struct *tsk,
 			retval = -EPERM;
 		if (!retval)
 			retval = security_task_setrlimit(tsk, resource, new_rlim);
-		if (resource == RLIMIT_CPU && new_rlim->rlim_cur == 0) {
+		if ((resource == RLIMIT_CPU || resource == RLIMIT_MCPU) && new_rlim->rlim_cur == 0) {
 			/*
 			 * The caller is asking for an immediate RLIMIT_CPU
 			 * expiry.  But we use the zero value to mean "it was
@@ -1523,6 +1531,12 @@ int do_prlimit(struct task_struct *tsk,
 	     new_rlim->rlim_cur != RLIM_INFINITY &&
 	     IS_ENABLED(CONFIG_POSIX_TIMERS))
 		update_rlimit_cpu(tsk, new_rlim->rlim_cur);
+
+	 if (!retval && new_rlim && resource == RLIMIT_MCPU &&
+	     new_rlim->rlim_cur != RLIM_INFINITY &&
+	     IS_ENABLED(CONFIG_POSIX_TIMERS))
+		update_rlimit_mcpu(tsk, new_rlim->rlim_cur);
+
 out:
 	read_unlock(&tasklist_lock);
 	return retval;
@@ -1655,7 +1669,7 @@ void getrusage(struct task_struct *p, in
 	struct task_struct *t;
 	unsigned long flags;
 	u64 tgutime, tgstime, utime, stime;
-	unsigned long maxrss = 0;
+	unsigned long maxrss = 0, maxvm = 0;
 
 	memset((char *)r, 0, sizeof (*r));
 	utime = stime = 0;
@@ -1664,6 +1678,7 @@ void getrusage(struct task_struct *p, in
 		task_cputime_adjusted(current, &utime, &stime);
 		accumulate_thread_rusage(p, r);
 		maxrss = p->signal->maxrss;
+		maxvm = p->signal->maxvm;
 		goto out;
 	}
 
@@ -1682,6 +1697,7 @@ void getrusage(struct task_struct *p, in
 		r->ru_inblock = p->signal->cinblock;
 		r->ru_oublock = p->signal->coublock;
 		maxrss = p->signal->cmaxrss;
+		maxvm = p->signal->cmaxvm;
 
 		if (who == RUSAGE_CHILDREN)
 			break;
@@ -1698,6 +1714,8 @@ void getrusage(struct task_struct *p, in
 		r->ru_oublock += p->signal->oublock;
 		if (maxrss < p->signal->maxrss)
 			maxrss = p->signal->maxrss;
+		if (maxvm < p->signal->maxvm)
+			maxvm = p->signal->maxvm;
 		t = p;
 		do {
 			accumulate_thread_rusage(t, r);
@@ -1718,10 +1736,12 @@ out:
 
 		if (mm) {
 			setmax_mm_hiwater_rss(&maxrss, mm);
+			setmax_mm_hiwater_vm(&maxvm, mm);
 			mmput(mm);
 		}
 	}
 	r->ru_maxrss = maxrss * (PAGE_SIZE / 1024); /* convert pages to KBs */
+	r->ru_isrss = maxvm * (PAGE_SIZE / 1024); 	/* using ru_isrss to handle maxvm usage */
 }
 
 SYSCALL_DEFINE2(getrusage, int, who, struct rusage __user *, ru)
@@ -2569,3 +2589,13 @@ COMPAT_SYSCALL_DEFINE1(sysinfo, struct c
 	return 0;
 }
 #endif /* CONFIG_COMPAT */
+
+#define KJ_ISOLATE_MEMLIMIT			0x0001
+#define KJ_ISOLATE_TIMELIMIT		0x0002
+
+SYSCALL_DEFINE1(kj_isolate, unsigned, flags)
+{
+	if (flags & KJ_ISOLATE_MEMLIMIT) current->kj_flags |= KJ_STAT_MEMLIMIT;
+	if (flags & KJ_ISOLATE_TIMELIMIT) current->kj_flags |= KJ_STAT_TIMELIMIT;
+	return 0;
+}
diff -ruNp linux-4.14.88/kernel/time/posix-cpu-timers.c linux-4.14.88-kjudge/kernel/time/posix-cpu-timers.c
--- linux-4.14.88/kernel/time/posix-cpu-timers.c	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/kernel/time/posix-cpu-timers.c	2019-01-18 17:11:23.618633291 +0300
@@ -34,6 +34,15 @@ void update_rlimit_cpu(struct task_struc
 	spin_unlock_irq(&task->sighand->siglock);
 }
 
+void update_rlimit_mcpu(struct task_struct *task, unsigned long rlim_new)
+{
+	u64 nsecs = rlim_new * NSEC_PER_MSEC;
+
+	spin_lock_irq(&task->sighand->siglock);
+	set_process_cpu_timer(task, CPUCLOCK_PROF, &nsecs, NULL);
+	spin_unlock_irq(&task->sighand->siglock);
+}
+
 static int check_clock(const clockid_t which_clock)
 {
 	int error = 0;
@@ -833,6 +842,9 @@ static void check_thread_timers(struct t
 			 * At the hard limit, we just die.
 			 * No need to calculate anything else now.
 			 */
+
+			tsk->kj_flags |= KJ_WAS_TIMELIMIT_RT;
+
 			if (print_fatal_signals) {
 				pr_info("CPU Watchdog Timeout (hard): %s[%d]\n",
 					tsk->comm, task_pid_nr(tsk));
@@ -904,7 +916,7 @@ static void check_process_timers(struct
 	u64 sum_sched_runtime, sched_expires;
 	struct list_head *timers = sig->cpu_timers;
 	struct task_cputime cputime;
-	unsigned long soft;
+	unsigned long soft, hard;
 
 	/*
 	 * If cputimer is not running, then there are no active
@@ -939,7 +951,7 @@ static void check_process_timers(struct
 	check_cpu_itimer(tsk, &sig->it[CPUCLOCK_VIRT], &virt_expires, utime,
 			 SIGVTALRM);
 	soft = task_rlimit(tsk, RLIMIT_CPU);
-	if (soft != RLIM_INFINITY) {
+	if (unlikely((soft != RLIM_INFINITY))) {
 		unsigned long psecs = div_u64(ptime, NSEC_PER_SEC);
 		unsigned long hard = task_rlimit_max(tsk, RLIMIT_CPU);
 		u64 x;
@@ -948,6 +960,9 @@ static void check_process_timers(struct
 			 * At the hard limit, we just die.
 			 * No need to calculate anything else now.
 			 */
+
+			tsk->kj_flags |= KJ_WAS_TIMELIMIT_CPU;
+
 			if (print_fatal_signals) {
 				pr_info("RT Watchdog Timeout (hard): %s[%d]\n",
 					tsk->comm, task_pid_nr(tsk));
@@ -973,6 +988,31 @@ static void check_process_timers(struct
 		if (!prof_expires || x < prof_expires)
 			prof_expires = x;
 	}
+
+	hard = task_rlimit_max(tsk, RLIMIT_MCPU);
+	if (unlikely((hard != RLIM_INFINITY))) {
+		unsigned long pmsecs = div_u64(ptime, NSEC_PER_MSEC);
+		u64 x;
+		if (pmsecs >= hard) {
+			/*
+			 * At the hard limit, we just die.
+			 * No need to calculate anything else now.
+			 */
+
+			tsk->kj_flags |= KJ_WAS_TIMELIMIT_CPU;
+
+			if (print_fatal_signals) {
+				pr_info("RT Watchdog Timeout (hard): %s[%d]\n",
+					tsk->comm, task_pid_nr(tsk));
+			}
+			__group_send_sig_info(SIGKILL, SEND_SIG_PRIV, tsk);
+			return;
+		}
+
+		x = hard * NSEC_PER_MSEC;
+		if (!prof_expires || x < prof_expires)
+			prof_expires = x;
+	}
 
 	sig->cputime_expires.prof_exp = prof_expires;
 	sig->cputime_expires.virt_exp = virt_expires;
diff -ruNp linux-4.14.88/Makefile linux-4.14.88-kjudge/Makefile
--- linux-4.14.88/Makefile	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/Makefile	2019-01-18 18:38:05.841273985 +0300
@@ -2,7 +2,7 @@
 VERSION = 4
 PATCHLEVEL = 14
 SUBLEVEL = 88
-EXTRAVERSION =
+EXTRAVERSION = -kjudge
 NAME = Petit Gorille
 
 # *DOCUMENTATION*
diff -ruNp linux-4.14.88/mm/mmap.c linux-4.14.88-kjudge/mm/mmap.c
--- linux-4.14.88/mm/mmap.c	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/mm/mmap.c	2019-01-18 17:11:23.618633291 +0300
@@ -246,11 +246,21 @@ set_brk:
 	userfaultfd_unmap_complete(mm, &uf);
 	if (populate)
 		mm_populate(oldbrk, newbrk - oldbrk);
+	if (brk == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT;
+		}
+	}
 	return brk;
 
 out:
 	retval = mm->brk;
 	up_write(&mm->mmap_sem);
+	if (retval == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT;
+		}
+	}
 	return retval;
 }
 
@@ -1551,6 +1561,11 @@ SYSCALL_DEFINE6(mmap_pgoff, unsigned lon
 out_fput:
 	if (file)
 		fput(file);
+	if (retval == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT;
+		}
+	}
 	return retval;
 }
 
@@ -1573,8 +1588,14 @@ SYSCALL_DEFINE1(old_mmap, struct mmap_ar
 	if (offset_in_page(a.offset))
 		return -EINVAL;
 
-	return sys_mmap_pgoff(a.addr, a.len, a.prot, a.flags, a.fd,
+	long ret = sys_mmap_pgoff(a.addr, a.len, a.prot, a.flags, a.fd,
 			      a.offset >> PAGE_SHIFT);
+	if (ret == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT;
+		}
+	}
+	return ret;
 }
 #endif /* __ARCH_WANT_SYS_OLD_MMAP */
 
@@ -2213,12 +2234,20 @@ static int acct_stack_growth(struct vm_a
 	unsigned long new_start;
 
 	/* address space limit tests */
-	if (!may_expand_vm(mm, vma->vm_flags, grow))
+	if (!may_expand_vm(mm, vma->vm_flags, grow)) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT_STACK;
+		}
 		return -ENOMEM;
+	}
 
 	/* Stack limit test */
-	if (size > rlimit(RLIMIT_STACK))
+	if (size > rlimit(RLIMIT_STACK)) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT_STACK;
+		}
 		return -ENOMEM;
+	}
 
 	/* mlock limit tests */
 	if (vma->vm_flags & VM_LOCKED) {
@@ -2227,8 +2256,12 @@ static int acct_stack_growth(struct vm_a
 		locked = mm->locked_vm + grow;
 		limit = rlimit(RLIMIT_MEMLOCK);
 		limit >>= PAGE_SHIFT;
-		if (locked > limit && !capable(CAP_IPC_LOCK))
+		if (locked > limit && !capable(CAP_IPC_LOCK)) {
+			if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+				current->kj_flags |= KJ_WAS_MEMLIMIT_STACK;
+			}
 			return -ENOMEM;
+		}
 	}
 
 	/* Check to ensure the stack will not grow into a hugetlb-only region */
@@ -2241,8 +2274,12 @@ static int acct_stack_growth(struct vm_a
 	 * Overcommit..  This must be the final test, as it will
 	 * update security statistics.
 	 */
-	if (security_vm_enough_memory_mm(mm, grow))
+	if (security_vm_enough_memory_mm(mm, grow)) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT_STACK;
+		}
 		return -ENOMEM;
+	}
 
 	return 0;
 }
@@ -2869,6 +2906,11 @@ out:
 		mm_populate(ret, populate);
 	if (!IS_ERR_VALUE(ret))
 		ret = 0;
+	if (ret == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT;
+		}
+	}
 	return ret;
 }
 
diff -ruNp linux-4.14.88/mm/mremap.c linux-4.14.88-kjudge/mm/mremap.c
--- linux-4.14.88/mm/mremap.c	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/mm/mremap.c	2019-01-18 17:11:23.618633291 +0300
@@ -637,5 +637,11 @@ out:
 	userfaultfd_unmap_complete(mm, &uf_unmap_early);
 	mremap_userfaultfd_complete(&uf, addr, new_addr, old_len);
 	userfaultfd_unmap_complete(mm, &uf_unmap);
+
+	if (ret == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT;
+		}
+	}
 	return ret;
 }
diff -ruNp linux-4.14.88/security/selinux/hooks.c linux-4.14.88-kjudge/security/selinux/hooks.c
--- linux-4.14.88/security/selinux/hooks.c	2018-12-13 11:18:54.000000000 +0300
+++ linux-4.14.88-kjudge/security/selinux/hooks.c	2019-01-18 17:11:23.622633304 +0300
@@ -2569,8 +2569,13 @@ static void selinux_bprm_committing_cred
 			rlim->rlim_cur = min(rlim->rlim_max, initrlim->rlim_cur);
 		}
 		task_unlock(current);
-		if (IS_ENABLED(CONFIG_POSIX_TIMERS))
-			update_rlimit_cpu(current, rlimit(RLIMIT_CPU));
+
+		if (IS_ENABLED(CONFIG_POSIX_TIMERS)) {
+			if (unlikely((rlimit(RLIMIT_MCPU) != RLIM_INFINITY)))
+				update_rlimit_mcpu(current, rlimit(RLIMIT_MCPU));
+			else
+				update_rlimit_cpu(current, rlimit(RLIMIT_CPU));
+		}		
 	}
 }
 
