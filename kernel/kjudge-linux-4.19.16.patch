Copyright (C) 2019 Andrei Odintsov <forestryks1@gmail.com>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

diff -ruNp linux-4.19.16/fs/aio.c linux-4.19.16-kjudge/fs/aio.c
--- linux-4.19.16/fs/aio.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/fs/aio.c	2019-01-28 20:38:29.173481882 +0300
@@ -1290,6 +1290,8 @@ SYSCALL_DEFINE2(io_setup, unsigned, nr_e
 	unsigned long ctx;
 	long ret;
 
+	KJ_OMIT(0, io_setup);
+
 	ret = get_user(ctx, ctxp);
 	if (unlikely(ret))
 		goto out;
@@ -1321,6 +1323,8 @@ COMPAT_SYSCALL_DEFINE2(io_setup, unsigne
 	unsigned long ctx;
 	long ret;
 
+	KJ_OMIT(0, io_setup);
+
 	ret = get_user(ctx, ctx32p);
 	if (unlikely(ret))
 		goto out;
@@ -1355,7 +1359,11 @@ out:
  */
 SYSCALL_DEFINE1(io_destroy, aio_context_t, ctx)
 {
-	struct kioctx *ioctx = lookup_ioctx(ctx);
+	struct kioctx *ioctx;
+
+	KJ_OMIT(1, io_destroy);
+
+	ioctx = lookup_ioctx(ctx);
 	if (likely(NULL != ioctx)) {
 		struct ctx_rq_wait wait;
 		int ret;
@@ -1895,6 +1903,8 @@ SYSCALL_DEFINE3(io_submit, aio_context_t
 	int i = 0;
 	struct blk_plug plug;
 
+	KJ_OMIT(2, io_submit);
+
 	if (unlikely(nr < 0))
 		return -EINVAL;
 
@@ -1935,6 +1945,8 @@ COMPAT_SYSCALL_DEFINE3(io_submit, compat
 	int i = 0;
 	struct blk_plug plug;
 
+	KJ_OMIT(2, io_submit);
+
 	if (unlikely(nr < 0))
 		return -EINVAL;
 
@@ -2003,6 +2015,8 @@ SYSCALL_DEFINE3(io_cancel, aio_context_t
 	int ret = -EINVAL;
 	u32 key;
 
+	KJ_OMIT(3, io_cancel);
+
 	if (unlikely(get_user(key, &iocb->aio_key)))
 		return -EFAULT;
 	if (unlikely(key != KIOCB_KEY))
@@ -2074,6 +2088,8 @@ SYSCALL_DEFINE5(io_getevents, aio_contex
 	struct timespec64	ts;
 	int			ret;
 
+	KJ_OMIT(4, io_getevents);
+
 	if (timeout && unlikely(get_timespec64(&ts, timeout)))
 		return -EFAULT;
 
@@ -2143,6 +2159,8 @@ COMPAT_SYSCALL_DEFINE5(io_getevents, com
 	struct timespec64 t;
 	int ret;
 
+	KJ_OMIT(4, io_getevents);
+
 	if (timeout && compat_get_timespec64(&t, timeout))
 		return -EFAULT;
 
diff -ruNp linux-4.19.16/fs/exec.c linux-4.19.16-kjudge/fs/exec.c
--- linux-4.19.16/fs/exec.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/fs/exec.c	2019-01-24 23:16:48.491099356 +0300
@@ -1039,6 +1039,7 @@ static int exec_mmap(struct mm_struct *m
 		up_read(&old_mm->mmap_sem);
 		BUG_ON(active_mm != old_mm);
 		setmax_mm_hiwater_rss(&tsk->signal->maxrss, old_mm);
+		setmax_mm_hiwater_vm(&tsk->signal->maxvm, old_mm);
 		mm_update_next_owner(old_mm);
 		mmput(old_mm);
 		return 0;
@@ -1853,6 +1854,12 @@ out_files:
 	if (displaced)
 		reset_files_struct(displaced);
 out_ret:
+	if (retval == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT_EXEC;
+		}
+	}
+
 	if (filename)
 		putname(filename);
 	return retval;
diff -ruNp linux-4.19.16/fs/proc/base.c linux-4.19.16-kjudge/fs/proc/base.c
--- linux-4.19.16/fs/proc/base.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/fs/proc/base.c	2019-01-24 23:16:48.731108601 +0300
@@ -562,6 +562,7 @@ static const struct limit_names lnames[R
 	[RLIMIT_NICE] = {"Max nice priority", NULL},
 	[RLIMIT_RTPRIO] = {"Max realtime priority", NULL},
 	[RLIMIT_RTTIME] = {"Max realtime timeout", "us"},
+	[RLIMIT_MCPU] = {"Max cpu time", "ms"},
 };
 
 /* Display limits for a process */
diff -ruNp linux-4.19.16/include/asm-generic/resource.h linux-4.19.16-kjudge/include/asm-generic/resource.h
--- linux-4.19.16/include/asm-generic/resource.h	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/include/asm-generic/resource.h	2019-01-24 23:16:49.935154981 +0300
@@ -26,6 +26,7 @@
 	[RLIMIT_NICE]		= { 0, 0 },				\
 	[RLIMIT_RTPRIO]		= { 0, 0 },				\
 	[RLIMIT_RTTIME]		= {  RLIM_INFINITY,  RLIM_INFINITY },	\
+	[RLIMIT_MCPU]		= {  RLIM_INFINITY,  RLIM_INFINITY },	\
 }
 
 #endif
diff -ruNp linux-4.19.16/include/linux/mm.h linux-4.19.16-kjudge/include/linux/mm.h
--- linux-4.19.16/include/linux/mm.h	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/include/linux/mm.h	2019-01-24 23:16:49.935154981 +0300
@@ -1664,6 +1664,11 @@ static inline void reset_mm_hiwater_rss(
 	mm->hiwater_rss = get_mm_rss(mm);
 }
 
+static inline void reset_mm_hiwater_vm(struct mm_struct *mm)
+{
+	mm->hiwater_vm = mm->total_vm;
+}
+
 static inline void setmax_mm_hiwater_rss(unsigned long *maxrss,
 					 struct mm_struct *mm)
 {
@@ -1673,6 +1678,15 @@ static inline void setmax_mm_hiwater_rss
 		*maxrss = hiwater_rss;
 }
 
+static inline void setmax_mm_hiwater_vm(unsigned long *maxvm,
+					 struct mm_struct *mm)
+{
+	unsigned long hiwater_vm = get_mm_hiwater_vm(mm);
+
+	if (*maxvm < hiwater_vm)
+		*maxvm = hiwater_vm;
+}
+
 #if defined(SPLIT_RSS_COUNTING)
 void sync_mm_rss(struct mm_struct *mm);
 #else
diff -ruNp linux-4.19.16/include/linux/posix-timers.h linux-4.19.16-kjudge/include/linux/posix-timers.h
--- linux-4.19.16/include/linux/posix-timers.h	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/include/linux/posix-timers.h	2019-01-24 23:16:49.939155135 +0300
@@ -125,6 +125,7 @@ void set_process_cpu_timer(struct task_s
 			   u64 *newval, u64 *oldval);
 
 void update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new);
+void update_rlimit_mcpu(struct task_struct *task, unsigned long rlim_new);
 
 void posixtimer_rearm(struct siginfo *info);
 #endif
diff -ruNp linux-4.19.16/include/linux/sched/signal.h linux-4.19.16-kjudge/include/linux/sched/signal.h
--- linux-4.19.16/include/linux/sched/signal.h	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/include/linux/sched/signal.h	2019-01-24 23:16:49.939155135 +0300
@@ -186,6 +186,7 @@ struct signal_struct {
 	unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 	unsigned long inblock, oublock, cinblock, coublock;
 	unsigned long maxrss, cmaxrss;
+	unsigned long maxvm, cmaxvm;
 	struct task_io_accounting ioac;
 
 	/*
diff -ruNp linux-4.19.16/include/linux/sched.h linux-4.19.16-kjudge/include/linux/sched.h
--- linux-4.19.16/include/linux/sched.h	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/include/linux/sched.h	2019-01-27 14:43:59.499562904 +0300
@@ -55,6 +55,63 @@ struct signal_struct;
 struct task_delay_info;
 struct task_group;
 
+#define KJ_WAS_MEMLIMIT					0x0001
+#define KJ_WAS_MEMLIMIT_STACK			0x0002
+#define KJ_WAS_MEMLIMIT_EXEC			0x0004
+#define KJ_WAS_TIMELIMIT_CPU			0x0008
+#define KJ_WAS_TIMELIMIT_RT				0x0010	/* now means nothing special */
+#define KJ_STAT_MEMLIMIT				0x0020
+#define KJ_STAT_TIMELIMIT				0x0040
+#define KJ_SAFEMODE						0x0080
+#define KJ_FORBID_EXEC					0x0100
+#define KJ_WAS_SV						0x0200
+
+/* now status is represented in such way:
+ * [31..22] - SV syscall id
+ * [21..16]	- KJ flags
+ * [15..0]  - system info 0xffff
+ */
+#define KJ_WAS_MEMLIMIT_STAT			0x010000
+#define KJ_WAS_MEMLIMIT_STACK_STAT		0x020000
+#define KJ_WAS_MEMLIMIT_EXEC_STAT		0x040000
+#define KJ_WAS_TIMELIMIT_STAT			0x080000
+#define KJ_WAS_SV_STAT					0x100000
+
+// (!) name is not string
+#define KJ_SET_SV_ERROR(id, name) do { \
+	current->kj_flags |= KJ_WAS_SV; \
+	current->kj_violation_id = id; \
+} while (0);
+
+#define KJ_ISOLATED() (current->kj_flags && KJ_SAFEMODE)
+
+#define KJ_FORBID(id, name) do { \
+	if (KJ_ISOLATED()) { \
+		KJ_SET_SV_ERROR(id, name); \
+		return -EPERM; \
+	} \
+} while (0);
+
+#define KJ_FORBID_IF(cond, id, name) do { \
+	if (KJ_ISOLATED() && (cond)) { \
+		KJ_SET_SV_ERROR(id, name); \
+		return -EPERM; \
+	} \
+} while (0); 
+
+#define KJ_OMIT(id, name) do { \
+	if (KJ_ISOLATED()) { \
+		return -EPERM; \
+	} \
+} while (0);
+
+#define KJ_OMIT_IF(cond, id, name) do { \
+	if (KJ_ISOLATED() && (cond)) { \
+		return -EPERM; \
+	} \
+} while (0);
+
+
 /*
  * Task state bitmask. NOTE! These bits are also
  * encoded in fs/proc/array.c: get_task_state().
@@ -1193,6 +1250,8 @@ struct task_struct {
 	void				*security;
 #endif
 
+	unsigned int kj_flags, kj_violation_id;
+
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff -ruNp linux-4.19.16/include/uapi/asm-generic/resource.h linux-4.19.16-kjudge/include/uapi/asm-generic/resource.h
--- linux-4.19.16/include/uapi/asm-generic/resource.h	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/include/uapi/asm-generic/resource.h	2019-01-24 23:16:49.939155135 +0300
@@ -46,7 +46,8 @@
 					   0-39 for nice level 19 .. -20 */
 #define RLIMIT_RTPRIO		14	/* maximum realtime priority */
 #define RLIMIT_RTTIME		15	/* timeout for RT tasks in us */
-#define RLIM_NLIMITS		16
+#define RLIMIT_MCPU			16	/* maximum cpu time in ms */
+#define RLIM_NLIMITS		17
 
 /*
  * SuS says limits have to be unsigned.
diff -ruNp linux-4.19.16/include/uapi/asm-generic/unistd.h linux-4.19.16-kjudge/include/uapi/asm-generic/unistd.h
--- linux-4.19.16/include/uapi/asm-generic/unistd.h	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/include/uapi/asm-generic/unistd.h	2019-01-25 18:08:05.718037465 +0300
@@ -30,6 +30,7 @@
 #define __SC_COMP_3264(_nr, _32, _64, _comp) __SC_3264(_nr, _32, _64)
 #endif
 
+
 #define __NR_io_setup 0
 __SC_COMP(__NR_io_setup, sys_io_setup, compat_sys_io_setup)
 #define __NR_io_destroy 1
diff -ruNp linux-4.19.16/include/uapi/linux/prctl.h linux-4.19.16-kjudge/include/uapi/linux/prctl.h
--- linux-4.19.16/include/uapi/linux/prctl.h	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/include/uapi/linux/prctl.h	2019-01-24 23:16:49.939155135 +0300
@@ -220,4 +220,11 @@ struct prctl_mm_map {
 # define PR_SPEC_DISABLE		(1UL << 2)
 # define PR_SPEC_FORCE_DISABLE		(1UL << 3)
 
+/* kJudge */
+#define PR_KJ_ISOLATE			54
+#define PR_KJ_MEMLIMIT			0x0001
+#define PR_KJ_TIMELIMIT			0x0002
+#define PR_KJ_SAFEMODE			0x0004
+
+
 #endif /* _LINUX_PRCTL_H */
diff -ruNp linux-4.19.16/kernel/exit.c linux-4.19.16-kjudge/kernel/exit.c
--- linux-4.19.16/kernel/exit.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/kernel/exit.c	2019-01-24 23:16:49.943155290 +0300
@@ -840,8 +840,10 @@ void __noreturn do_exit(long code)
 		hrtimer_cancel(&tsk->signal->real_timer);
 		exit_itimers(tsk->signal);
 #endif
-		if (tsk->mm)
+		if (tsk->mm) {
 			setmax_mm_hiwater_rss(&tsk->signal->maxrss, tsk->mm);
+			setmax_mm_hiwater_vm(&tsk->signal->maxvm, tsk->mm);
+		}
 	}
 	acct_collect(code, group_dead);
 	if (group_dead)
@@ -1081,7 +1083,7 @@ static int wait_task_zombie(struct wait_
 	if (state == EXIT_DEAD && thread_group_leader(p)) {
 		struct signal_struct *sig = p->signal;
 		struct signal_struct *psig = current->signal;
-		unsigned long maxrss;
+		unsigned long maxrss, maxvm;
 		u64 tgutime, tgstime;
 
 		/*
@@ -1127,6 +1129,9 @@ static int wait_task_zombie(struct wait_
 		maxrss = max(sig->maxrss, sig->cmaxrss);
 		if (psig->cmaxrss < maxrss)
 			psig->cmaxrss = maxrss;
+		maxvm = max(sig->maxvm, sig->cmaxvm);
+		if (psig->cmaxvm < maxvm)
+			psig->cmaxvm = maxvm;
 		task_io_accounting_add(&psig->ioac, &p->ioac);
 		task_io_accounting_add(&psig->ioac, &sig->ioac);
 		write_sequnlock(&psig->stats_lock);
@@ -1137,6 +1142,19 @@ static int wait_task_zombie(struct wait_
 		getrusage(p, RUSAGE_BOTH, wo->wo_rusage);
 	status = (p->signal->flags & SIGNAL_GROUP_EXIT)
 		? p->signal->group_exit_code : p->exit_code;
+
+	if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT))
+		status |= KJ_WAS_MEMLIMIT_STAT;
+	if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT_STACK))
+		status |= KJ_WAS_MEMLIMIT_STACK_STAT;
+	if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT_EXEC))
+		status |= KJ_WAS_MEMLIMIT_EXEC_STAT;
+	if ((p->kj_flags & KJ_STAT_TIMELIMIT) && (p->kj_flags & (KJ_WAS_TIMELIMIT_CPU | KJ_WAS_TIMELIMIT_RT)))
+		status |= KJ_WAS_TIMELIMIT_STAT;
+	if ((p->kj_flags & KJ_SAFEMODE) && (p->kj_flags & KJ_WAS_SV)) {
+		status |= KJ_WAS_SV_STAT;
+		status |= (p->kj_violation_id << 22);
+	}
 	wo->wo_stat = status;
 
 	if (state == EXIT_TRACE) {
@@ -1252,10 +1270,23 @@ unlock_sig:
 	sched_annotate_sleep();
 	if (wo->wo_rusage)
 		getrusage(p, RUSAGE_BOTH, wo->wo_rusage);
-	put_task_struct(p);
-
-	if (likely(!(wo->wo_flags & WNOWAIT)))
+	
+	if (likely(!(wo->wo_flags & WNOWAIT))) {
 		wo->wo_stat = (exit_code << 8) | 0x7f;
+		if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT))
+			wo->wo_stat |= KJ_WAS_MEMLIMIT_STAT;
+		if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT_STACK))
+			wo->wo_stat |= KJ_WAS_MEMLIMIT_STACK_STAT;
+		if ((p->kj_flags & KJ_STAT_MEMLIMIT) && (p->kj_flags & KJ_WAS_MEMLIMIT_EXEC))
+			wo->wo_stat |= KJ_WAS_MEMLIMIT_EXEC_STAT;
+		if ((p->kj_flags & KJ_STAT_TIMELIMIT) && (p->kj_flags & (KJ_WAS_TIMELIMIT_CPU | KJ_WAS_TIMELIMIT_RT)))
+			wo->wo_stat |= KJ_WAS_TIMELIMIT_STAT;
+		if ((p->kj_flags & KJ_SAFEMODE) && (p->kj_flags & KJ_WAS_SV)) {
+			wo->wo_stat |= KJ_WAS_SV_STAT;
+			wo->wo_stat |= (p->kj_violation_id << 22);
+		}
+	}
+	put_task_struct(p);
 
 	infop = wo->wo_info;
 	if (infop) {
diff -ruNp linux-4.19.16/kernel/fork.c linux-4.19.16-kjudge/kernel/fork.c
--- linux-4.19.16/kernel/fork.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/kernel/fork.c	2019-01-24 23:16:49.943155290 +0300
@@ -1453,11 +1453,17 @@ static void posix_cpu_timers_init_group(
 	unsigned long cpu_limit;
 
 	cpu_limit = READ_ONCE(sig->rlim[RLIMIT_CPU].rlim_cur);
-	if (cpu_limit != RLIM_INFINITY) {
+	if (unlikely((cpu_limit != RLIM_INFINITY))) {
 		sig->cputime_expires.prof_exp = cpu_limit * NSEC_PER_SEC;
 		sig->cputimer.running = true;
 	}
 
+	cpu_limit = READ_ONCE(sig->rlim[RLIMIT_MCPU].rlim_cur);
+	if (unlikely((cpu_limit != RLIM_INFINITY))) {
+		sig->cputime_expires.prof_exp = cpu_limit * NSEC_PER_MSEC;
+		sig->cputimer.running = true;
+	}
+
 	/* The timer lists. */
 	INIT_LIST_HEAD(&sig->cpu_timers[0]);
 	INIT_LIST_HEAD(&sig->cpu_timers[1]);
diff -ruNp linux-4.19.16/kernel/sys.c linux-4.19.16-kjudge/kernel/sys.c
--- linux-4.19.16/kernel/sys.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/kernel/sys.c	2019-01-24 23:16:49.943155290 +0300
@@ -1534,6 +1534,14 @@ int do_prlimit(struct task_struct *tsk,
 		if (resource == RLIMIT_NOFILE &&
 				new_rlim->rlim_max > sysctl_nr_open)
 			return -EPERM;
+		if (resource == RLIMIT_CPU &&
+				task_rlimit(tsk, RLIMIT_MCPU) != RLIM_INFINITY) {
+			return -EINVAL;
+		}
+		if (resource == RLIMIT_MCPU &&
+				task_rlimit(tsk, RLIMIT_CPU) != RLIM_INFINITY) {
+			return -EINVAL;
+		}
 	}
 
 	/* protect tsk->signal and tsk->sighand from disappearing */
@@ -1553,7 +1561,7 @@ int do_prlimit(struct task_struct *tsk,
 			retval = -EPERM;
 		if (!retval)
 			retval = security_task_setrlimit(tsk, resource, new_rlim);
-		if (resource == RLIMIT_CPU && new_rlim->rlim_cur == 0) {
+		if ((resource == RLIMIT_CPU || resource == RLIMIT_MCPU) && new_rlim->rlim_cur == 0) {
 			/*
 			 * The caller is asking for an immediate RLIMIT_CPU
 			 * expiry.  But we use the zero value to mean "it was
@@ -1581,6 +1589,12 @@ int do_prlimit(struct task_struct *tsk,
 	     new_rlim->rlim_cur != RLIM_INFINITY &&
 	     IS_ENABLED(CONFIG_POSIX_TIMERS))
 		update_rlimit_cpu(tsk, new_rlim->rlim_cur);
+
+	 if (!retval && new_rlim && resource == RLIMIT_MCPU &&
+	     new_rlim->rlim_cur != RLIM_INFINITY &&
+	     IS_ENABLED(CONFIG_POSIX_TIMERS))
+		update_rlimit_mcpu(tsk, new_rlim->rlim_cur);
+
 out:
 	read_unlock(&tasklist_lock);
 	return retval;
@@ -1713,7 +1727,7 @@ void getrusage(struct task_struct *p, in
 	struct task_struct *t;
 	unsigned long flags;
 	u64 tgutime, tgstime, utime, stime;
-	unsigned long maxrss = 0;
+	unsigned long maxrss = 0, maxvm = 0;
 
 	memset((char *)r, 0, sizeof (*r));
 	utime = stime = 0;
@@ -1722,6 +1736,7 @@ void getrusage(struct task_struct *p, in
 		task_cputime_adjusted(current, &utime, &stime);
 		accumulate_thread_rusage(p, r);
 		maxrss = p->signal->maxrss;
+		maxvm = p->signal->maxvm;
 		goto out;
 	}
 
@@ -1740,6 +1755,7 @@ void getrusage(struct task_struct *p, in
 		r->ru_inblock = p->signal->cinblock;
 		r->ru_oublock = p->signal->coublock;
 		maxrss = p->signal->cmaxrss;
+		maxvm = p->signal->cmaxvm;
 
 		if (who == RUSAGE_CHILDREN)
 			break;
@@ -1756,6 +1772,8 @@ void getrusage(struct task_struct *p, in
 		r->ru_oublock += p->signal->oublock;
 		if (maxrss < p->signal->maxrss)
 			maxrss = p->signal->maxrss;
+		if (maxvm < p->signal->maxvm)
+			maxvm = p->signal->maxvm;
 		t = p;
 		do {
 			accumulate_thread_rusage(t, r);
@@ -1776,10 +1794,12 @@ out:
 
 		if (mm) {
 			setmax_mm_hiwater_rss(&maxrss, mm);
+			setmax_mm_hiwater_vm(&maxvm, mm);
 			mmput(mm);
 		}
 	}
 	r->ru_maxrss = maxrss * (PAGE_SIZE / 1024); /* convert pages to KBs */
+	r->ru_isrss = maxvm * (PAGE_SIZE / 1024); 	/* using ru_isrss to handle maxvm usage */
 }
 
 SYSCALL_DEFINE2(getrusage, int, who, struct rusage __user *, ru)
@@ -2476,6 +2496,17 @@ SYSCALL_DEFINE5(prctl, int, option, unsi
 			return -EINVAL;
 		error = arch_prctl_spec_ctrl_set(me, arg2, arg3);
 		break;
+	case PR_KJ_ISOLATE:
+		if (arg2 & PR_KJ_MEMLIMIT) me->kj_flags |= KJ_STAT_MEMLIMIT;
+		else me->kj_flags &= (~KJ_STAT_MEMLIMIT);
+
+		if (arg2 & PR_KJ_TIMELIMIT) me->kj_flags |= KJ_STAT_TIMELIMIT;
+		else me->kj_flags &= (~KJ_STAT_TIMELIMIT);
+
+		if (arg2 & PR_KJ_SAFEMODE) me->kj_flags |= KJ_SAFEMODE;
+		else me->kj_flags &= (~KJ_SAFEMODE);
+
+		break;
 	default:
 		error = -EINVAL;
 		break;
diff -ruNp linux-4.19.16/kernel/time/posix-cpu-timers.c linux-4.19.16-kjudge/kernel/time/posix-cpu-timers.c
--- linux-4.19.16/kernel/time/posix-cpu-timers.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/kernel/time/posix-cpu-timers.c	2019-01-24 23:16:49.947155444 +0300
@@ -35,6 +35,15 @@ void update_rlimit_cpu(struct task_struc
 	spin_unlock_irq(&task->sighand->siglock);
 }
 
+void update_rlimit_mcpu(struct task_struct *task, unsigned long rlim_new)
+{
+	u64 nsecs = rlim_new * NSEC_PER_MSEC;
+
+	spin_lock_irq(&task->sighand->siglock);
+	set_process_cpu_timer(task, CPUCLOCK_PROF, &nsecs, NULL);
+	spin_unlock_irq(&task->sighand->siglock);
+}
+
 static int check_clock(const clockid_t which_clock)
 {
 	int error = 0;
@@ -844,6 +853,9 @@ static void check_thread_timers(struct t
 			 * At the hard limit, we just die.
 			 * No need to calculate anything else now.
 			 */
+
+			tsk->kj_flags |= KJ_WAS_TIMELIMIT_RT;
+
 			if (print_fatal_signals) {
 				pr_info("CPU Watchdog Timeout (hard): %s[%d]\n",
 					tsk->comm, task_pid_nr(tsk));
@@ -915,7 +927,7 @@ static void check_process_timers(struct
 	u64 sum_sched_runtime, sched_expires;
 	struct list_head *timers = sig->cpu_timers;
 	struct task_cputime cputime;
-	unsigned long soft;
+	unsigned long soft, hard;
 
 	if (dl_task(tsk))
 		check_dl_overrun(tsk);
@@ -953,7 +965,7 @@ static void check_process_timers(struct
 	check_cpu_itimer(tsk, &sig->it[CPUCLOCK_VIRT], &virt_expires, utime,
 			 SIGVTALRM);
 	soft = task_rlimit(tsk, RLIMIT_CPU);
-	if (soft != RLIM_INFINITY) {
+	if (unlikely((soft != RLIM_INFINITY))) {
 		unsigned long psecs = div_u64(ptime, NSEC_PER_SEC);
 		unsigned long hard = task_rlimit_max(tsk, RLIMIT_CPU);
 		u64 x;
@@ -962,6 +974,9 @@ static void check_process_timers(struct
 			 * At the hard limit, we just die.
 			 * No need to calculate anything else now.
 			 */
+
+			tsk->kj_flags |= KJ_WAS_TIMELIMIT_CPU;
+
 			if (print_fatal_signals) {
 				pr_info("RT Watchdog Timeout (hard): %s[%d]\n",
 					tsk->comm, task_pid_nr(tsk));
@@ -987,6 +1002,31 @@ static void check_process_timers(struct
 		if (!prof_expires || x < prof_expires)
 			prof_expires = x;
 	}
+
+	hard = task_rlimit_max(tsk, RLIMIT_MCPU);
+	if (unlikely((hard != RLIM_INFINITY))) {
+		unsigned long pmsecs = div_u64(ptime, NSEC_PER_MSEC);
+		u64 x;
+		if (pmsecs >= hard) {
+			/*
+			 * At the hard limit, we just die.
+			 * No need to calculate anything else now.
+			 */
+
+			tsk->kj_flags |= KJ_WAS_TIMELIMIT_CPU;
+
+			if (print_fatal_signals) {
+				pr_info("RT Watchdog Timeout (hard): %s[%d]\n",
+					tsk->comm, task_pid_nr(tsk));
+			}
+			__group_send_sig_info(SIGKILL, SEND_SIG_PRIV, tsk);
+			return;
+		}
+
+		x = hard * NSEC_PER_MSEC;
+		if (!prof_expires || x < prof_expires)
+			prof_expires = x;
+	}
 
 	sig->cputime_expires.prof_exp = prof_expires;
 	sig->cputime_expires.virt_exp = virt_expires;
diff -ruNp linux-4.19.16/Makefile linux-4.19.16-kjudge/Makefile
--- linux-4.19.16/Makefile	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/Makefile	2019-01-24 23:16:49.947155444 +0300
@@ -2,7 +2,7 @@
 VERSION = 4
 PATCHLEVEL = 19
 SUBLEVEL = 16
-EXTRAVERSION =
+EXTRAVERSION = -kjudge
 NAME = "People's Front"
 
 # *DOCUMENTATION*
diff -ruNp linux-4.19.16/mm/madvise.c linux-4.19.16-kjudge/mm/madvise.c
--- linux-4.19.16/mm/madvise.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/mm/madvise.c	2019-01-24 23:16:49.947155444 +0300
@@ -476,6 +476,7 @@ static int madvise_free_single_vma(struc
 	lru_add_drain();
 	tlb_gather_mmu(&tlb, mm, start, end);
 	update_hiwater_rss(mm);
+	update_hiwater_vm(mm);
 
 	mmu_notifier_invalidate_range_start(mm, start, end);
 	madvise_free_page_range(&tlb, vma, start, end);
diff -ruNp linux-4.19.16/mm/memory.c linux-4.19.16-kjudge/mm/memory.c
--- linux-4.19.16/mm/memory.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/mm/memory.c	2019-01-24 23:16:49.951155598 +0300
@@ -1605,6 +1605,7 @@ void zap_page_range(struct vm_area_struc
 	lru_add_drain();
 	tlb_gather_mmu(&tlb, mm, start, end);
 	update_hiwater_rss(mm);
+	update_hiwater_vm(mm);
 	mmu_notifier_invalidate_range_start(mm, start, end);
 	for ( ; vma && vma->vm_start < end; vma = vma->vm_next)
 		unmap_single_vma(&tlb, vma, start, end, NULL);
@@ -1631,6 +1632,7 @@ static void zap_page_range_single(struct
 	lru_add_drain();
 	tlb_gather_mmu(&tlb, mm, address, end);
 	update_hiwater_rss(mm);
+	update_hiwater_vm(mm);
 	mmu_notifier_invalidate_range_start(mm, address, end);
 	unmap_single_vma(&tlb, vma, address, end, details);
 	mmu_notifier_invalidate_range_end(mm, address, end);
diff -ruNp linux-4.19.16/mm/mmap.c linux-4.19.16-kjudge/mm/mmap.c
--- linux-4.19.16/mm/mmap.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/mm/mmap.c	2019-01-24 23:16:49.951155598 +0300
@@ -196,6 +196,7 @@ SYSCALL_DEFINE1(brk, unsigned long, brk)
 	struct vm_area_struct *next;
 	unsigned long min_brk;
 	bool populate;
+	int do_brk_flags_ret;
 	LIST_HEAD(uf);
 
 	if (down_write_killable(&mm->mmap_sem))
@@ -225,7 +226,7 @@ SYSCALL_DEFINE1(brk, unsigned long, brk)
 	 */
 	if (check_data_rlimit(rlimit(RLIMIT_DATA), brk, mm->start_brk,
 			      mm->end_data, mm->start_data))
-		goto out;
+		goto enomem;
 
 	newbrk = PAGE_ALIGN(brk);
 	oldbrk = PAGE_ALIGN(mm->brk);
@@ -245,8 +246,12 @@ SYSCALL_DEFINE1(brk, unsigned long, brk)
 		goto out;
 
 	/* Ok, looks good - let it rip. */
-	if (do_brk_flags(oldbrk, newbrk-oldbrk, 0, &uf) < 0)
+	do_brk_flags_ret = do_brk_flags(oldbrk, newbrk-oldbrk, 0, &uf);
+	if (do_brk_flags_ret < 0) {
+		if (do_brk_flags_ret == -ENOMEM)
+			goto enomem;
 		goto out;
+	}
 
 set_brk:
 	mm->brk = brk;
@@ -257,6 +262,14 @@ set_brk:
 		mm_populate(oldbrk, newbrk - oldbrk);
 	return brk;
 
+enomem:
+	if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+		current->kj_flags |= KJ_WAS_MEMLIMIT;
+	}
+	retval = mm->brk;
+	up_write(&mm->mmap_sem);
+	return retval;
+
 out:
 	retval = mm->brk;
 	up_write(&mm->mmap_sem);
@@ -1586,6 +1599,11 @@ unsigned long ksys_mmap_pgoff(unsigned l
 out_fput:
 	if (file)
 		fput(file);
+	if (retval == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT;
+		}
+	}
 	return retval;
 }
 
@@ -1615,8 +1633,14 @@ SYSCALL_DEFINE1(old_mmap, struct mmap_ar
 	if (offset_in_page(a.offset))
 		return -EINVAL;
 
-	return ksys_mmap_pgoff(a.addr, a.len, a.prot, a.flags, a.fd,
-			       a.offset >> PAGE_SHIFT);
+	long ret = ksys_mmap_pgoff(a.addr, a.len, a.prot, a.flags, a.fd,
+			      a.offset >> PAGE_SHIFT);
+	if (ret == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT;
+		}
+	}
+	return ret;
 }
 #endif /* __ARCH_WANT_SYS_OLD_MMAP */
 
@@ -2256,12 +2280,20 @@ static int acct_stack_growth(struct vm_a
 	unsigned long new_start;
 
 	/* address space limit tests */
-	if (!may_expand_vm(mm, vma->vm_flags, grow))
+	if (!may_expand_vm(mm, vma->vm_flags, grow)) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT_STACK;
+		}
 		return -ENOMEM;
+	}
 
 	/* Stack limit test */
-	if (size > rlimit(RLIMIT_STACK))
+	if (size > rlimit(RLIMIT_STACK)) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT_STACK;
+		}
 		return -ENOMEM;
+	}
 
 	/* mlock limit tests */
 	if (vma->vm_flags & VM_LOCKED) {
@@ -2270,8 +2302,12 @@ static int acct_stack_growth(struct vm_a
 		locked = mm->locked_vm + grow;
 		limit = rlimit(RLIMIT_MEMLOCK);
 		limit >>= PAGE_SHIFT;
-		if (locked > limit && !capable(CAP_IPC_LOCK))
+		if (locked > limit && !capable(CAP_IPC_LOCK)) {
+			if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+				current->kj_flags |= KJ_WAS_MEMLIMIT_STACK;
+			}
 			return -ENOMEM;
+		}
 	}
 
 	/* Check to ensure the stack will not grow into a hugetlb-only region */
@@ -2284,8 +2320,12 @@ static int acct_stack_growth(struct vm_a
 	 * Overcommit..  This must be the final test, as it will
 	 * update security statistics.
 	 */
-	if (security_vm_enough_memory_mm(mm, grow))
+	if (security_vm_enough_memory_mm(mm, grow)) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT_STACK;
+		}
 		return -ENOMEM;
+	}
 
 	return 0;
 }
@@ -2568,6 +2608,7 @@ static void unmap_region(struct mm_struc
 	lru_add_drain();
 	tlb_gather_mmu(&tlb, mm, start, end);
 	update_hiwater_rss(mm);
+	update_hiwater_vm(mm);
 	unmap_vmas(&tlb, vma, start, end);
 	free_pgtables(&tlb, vma, prev ? prev->vm_end : FIRST_USER_ADDRESS,
 				 next ? next->vm_start : USER_PGTABLES_CEILING);
@@ -2907,6 +2948,11 @@ out:
 		mm_populate(ret, populate);
 	if (!IS_ERR_VALUE(ret))
 		ret = 0;
+	if (ret == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT;
+		}
+	}
 	return ret;
 }
 
diff -ruNp linux-4.19.16/mm/mremap.c linux-4.19.16-kjudge/mm/mremap.c
--- linux-4.19.16/mm/mremap.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/mm/mremap.c	2019-01-24 23:16:49.951155598 +0300
@@ -633,5 +633,11 @@ out:
 	userfaultfd_unmap_complete(mm, &uf_unmap_early);
 	mremap_userfaultfd_complete(&uf, addr, new_addr, old_len);
 	userfaultfd_unmap_complete(mm, &uf_unmap);
+
+	if (ret == -ENOMEM) {
+		if (current->kj_flags & KJ_STAT_MEMLIMIT) {
+			current->kj_flags |= KJ_WAS_MEMLIMIT;
+		}
+	}
 	return ret;
 }
diff -ruNp linux-4.19.16/mm/rmap.c linux-4.19.16-kjudge/mm/rmap.c
--- linux-4.19.16/mm/rmap.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/mm/rmap.c	2019-01-24 23:16:49.951155598 +0300
@@ -1504,6 +1504,7 @@ static bool try_to_unmap_one(struct page
 
 		/* Update high watermark before we lower rss */
 		update_hiwater_rss(mm);
+		update_hiwater_vm(mm);
 
 		if (PageHWPoison(page) && !(flags & TTU_IGNORE_HWPOISON)) {
 			pteval = swp_entry_to_pte(make_hwpoison_entry(subpage));
diff -ruNp linux-4.19.16/security/selinux/hooks.c linux-4.19.16-kjudge/security/selinux/hooks.c
--- linux-4.19.16/security/selinux/hooks.c	2019-01-17 00:04:38.000000000 +0300
+++ linux-4.19.16-kjudge/security/selinux/hooks.c	2019-01-24 23:16:49.951155598 +0300
@@ -2680,8 +2680,12 @@ static void selinux_bprm_committing_cred
 			rlim->rlim_cur = min(rlim->rlim_max, initrlim->rlim_cur);
 		}
 		task_unlock(current);
-		if (IS_ENABLED(CONFIG_POSIX_TIMERS))
-			update_rlimit_cpu(current, rlimit(RLIMIT_CPU));
+		if (IS_ENABLED(CONFIG_POSIX_TIMERS)) {
+			if (unlikely((rlimit(RLIMIT_MCPU) != RLIM_INFINITY)))
+				update_rlimit_mcpu(current, rlimit(RLIMIT_MCPU));
+			else
+				update_rlimit_cpu(current, rlimit(RLIMIT_CPU));
+		}
 	}
 }
 
